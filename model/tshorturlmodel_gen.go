// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	tShorturlFieldNames          = builder.RawFieldNames(&TShorturl{})
	tShorturlRows                = strings.Join(tShorturlFieldNames, ",")
	tShorturlRowsExpectAutoSet   = strings.Join(stringx.Remove(tShorturlFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	tShorturlRowsWithPlaceHolder = strings.Join(stringx.Remove(tShorturlFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheTShorturlIdPrefix       = "cache:tShorturl:id:"
	cacheTShorturlShortUrlPrefix = "cache:tShorturl:shortUrl:"
	cacheTShorturlUrlPrefix      = "cache:tShorturl:url:"
)

type (
	tShorturlModel interface {
		Insert(ctx context.Context, data *TShorturl) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*TShorturl, error)
		FindOneByShortUrl(ctx context.Context, shortUrl string) (*TShorturl, error)
		FindOneByUrl(ctx context.Context, url string) (*TShorturl, error)
		Update(ctx context.Context, data *TShorturl) error
		Delete(ctx context.Context, id int64) error
	}

	defaultTShorturlModel struct {
		sqlc.CachedConn
		table string
	}

	TShorturl struct {
		Id       int64  `db:"id"`
		Url      string `db:"url"`
		ShortUrl string `db:"short_url"`
	}
)

func newTShorturlModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultTShorturlModel {
	return &defaultTShorturlModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`t_shorturl`",
	}
}

func (m *defaultTShorturlModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	tShorturlIdKey := fmt.Sprintf("%s%v", cacheTShorturlIdPrefix, id)
	tShorturlShortUrlKey := fmt.Sprintf("%s%v", cacheTShorturlShortUrlPrefix, data.ShortUrl)
	tShorturlUrlKey := fmt.Sprintf("%s%v", cacheTShorturlUrlPrefix, data.Url)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, tShorturlIdKey, tShorturlShortUrlKey, tShorturlUrlKey)
	return err
}

func (m *defaultTShorturlModel) FindOne(ctx context.Context, id int64) (*TShorturl, error) {
	tShorturlIdKey := fmt.Sprintf("%s%v", cacheTShorturlIdPrefix, id)
	var resp TShorturl
	err := m.QueryRowCtx(ctx, &resp, tShorturlIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", tShorturlRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTShorturlModel) FindOneByShortUrl(ctx context.Context, shortUrl string) (*TShorturl, error) {
	tShorturlShortUrlKey := fmt.Sprintf("%s%v", cacheTShorturlShortUrlPrefix, shortUrl)
	var resp TShorturl
	err := m.QueryRowIndexCtx(ctx, &resp, tShorturlShortUrlKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `short_url` = ? limit 1", tShorturlRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, shortUrl); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTShorturlModel) FindOneByUrl(ctx context.Context, url string) (*TShorturl, error) {
	tShorturlUrlKey := fmt.Sprintf("%s%v", cacheTShorturlUrlPrefix, url)
	var resp TShorturl
	err := m.QueryRowIndexCtx(ctx, &resp, tShorturlUrlKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `url` = ? limit 1", tShorturlRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, url); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTShorturlModel) Insert(ctx context.Context, data *TShorturl) (sql.Result, error) {
	tShorturlIdKey := fmt.Sprintf("%s%v", cacheTShorturlIdPrefix, data.Id)
	tShorturlShortUrlKey := fmt.Sprintf("%s%v", cacheTShorturlShortUrlPrefix, data.ShortUrl)
	tShorturlUrlKey := fmt.Sprintf("%s%v", cacheTShorturlUrlPrefix, data.Url)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?)", m.table, tShorturlRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Url, data.ShortUrl)
	}, tShorturlIdKey, tShorturlShortUrlKey, tShorturlUrlKey)
	return ret, err
}

func (m *defaultTShorturlModel) Update(ctx context.Context, newData *TShorturl) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	tShorturlIdKey := fmt.Sprintf("%s%v", cacheTShorturlIdPrefix, data.Id)
	tShorturlShortUrlKey := fmt.Sprintf("%s%v", cacheTShorturlShortUrlPrefix, data.ShortUrl)
	tShorturlUrlKey := fmt.Sprintf("%s%v", cacheTShorturlUrlPrefix, data.Url)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, tShorturlRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.Url, newData.ShortUrl, newData.Id)
	}, tShorturlIdKey, tShorturlShortUrlKey, tShorturlUrlKey)
	return err
}

func (m *defaultTShorturlModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheTShorturlIdPrefix, primary)
}

func (m *defaultTShorturlModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", tShorturlRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultTShorturlModel) tableName() string {
	return m.table
}
